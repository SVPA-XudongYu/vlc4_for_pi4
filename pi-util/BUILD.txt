Build notes (cross compile from Ubuntu)
=======================================

Build from a patch
------------------

# Pick somewhere to put this
cd ~
mkdir chromium
cd chromium
# Get the build tools & put on path
# You may want to add the path in .bashrc
git clone https://chromium.googlesource.com/chromium/tools/depot_tools
export PATH=$PATH:`pwd`/depot_tools
# Get the main tree
fetch chromium
cd src
# Checkout the version you want
# * Fix version number
git checkout 55.0.2883.99
# Fix up any missing dependancies on the build m/c
# * may well be unnecessary if you have built any other chrome
./build/install-build-deps.sh
./build/install-build-deps.sh --arm
# Fetch & pull the other bits of the tree to sync.
# As we are checking out a tag the --with_branch_heads is important
gclient sync --with_branch_heads
# Patch - should be completely clean if everything matchs
# * Fix patch file to correct name / location
cd ..
patch -p1 < v55.0.2883.99.patch
cd src
# * Get a sysroot from somewhere and put it in build/linux/raspian_jessie_pi1-sysroot
# * Example below is only if you have got an appropriate one lying around
# * Otherwise follow sysroot instructions further down
rsync -rl previous_location/raspian_jessie_pi1-sysroot build/linux/
# Build output directories (out/armv6, out/armv7)
# * This script currently assumes a sysroot of build/linux/raspian_jessie_pi1-sysroot
#   so may need editing if you have put it elsewhere
pi-util/gngen.py
# Build chrome
ninja -C out/armv6 chrome chrome_sandbox
# Build armv7 ffmpeg
ninja -C out/armv7 third_party/ffmpeg


To run on a Pi
--------------

This requires a little installation.  The sandbox and ffmpeg shared libs
need to be copied to the pi.  As neither is being tweaked much by me these
steps should only be required if the underlying Chrome changes.  Otherwise
you can just run out of the build directory (src/out/armv6)

Assuming you can mount the build dir from the pi.

# On the Pi NOT the build machine
cd <path to build env>/src
# Copy the ffmpeg libs
pi-util/cplibs.sh
# Copy the sandbox. BUILDTYPE tells the script where to get it from
# This doesn't seem to be needed anymore with linux 4.9 and chrome 55
BUILDTYPE=armv6 build/update-linux-sandbox.sh
# Run chrome
cd out/armv6
./chrome


Rebuilds
--------

In most cases a simple "ninja -C out/armv6 chrome" is all that is needed
and the pi can run from out/armv6.

To clean build "rm -rf out" and follow the build instructions from gngen.py


Updating chromium from git
--------------------------

There is no script for this as the merges are prone to conflicts and it
is much easier to sort them if you are doing stuff manually.

If updating between major versions then mergeing tends to fail horribly
so something along the lines of:

# * Make sure there are no updates required and no untracked files
pi-util/gitscan.py status
# Tag source & make a patch file - patch file is useful when files are moved
# as then git goes all unhelpful
pi-util/settag.py -p mmal_2.13
# As git stash will reset the brnch switch to a temp branch 1st
pi-util/gitscan.py checkout -b stash/61/base
pi-util/gitscan.py --gitscan-no-src reset {BASE}
pi-util/gitscan.py --gitscan-no-src stash -u
pi-util/gitscan.py --gitscan-no-src checkout {BASE}

# Need to do src separately as the stash will lose pi-utils
cat pi-util/pipaths.py
git reset 56.0.2924.84
git stash -u

git checkout <new tag> -b test/67/mmal_2

# Clean out old objects
rm -rf obj
# Beware that git clean might kill our sub-repos so so don't do it unless we
# are sure it won't
# git clean -dxf

### Do the "get environment" stages of a new build
./build/install-build-deps.sh
./build/install-build-deps.sh --arm
# Fetch & pull the other bits of the tree to sync.
# As we are checking out a tag the --with_branch_heads is important
gclient sync --with_branch_heads

# Start rebuild
git stash pop

# Fix pipaths & make new branches (now so we don't forget later)
sed "s/src_commit=.*/src_commit=\"$TAG\"/" pi-util/pipaths.py | tee t
mv t pi-util/pipaths.py && git add pi-util/pipaths.py
chmod 0755 pi-util/*.py pi-util/*.sh
pi-util/gitscan.py --gitscan-no-src checkout -b test/66/mmal_2

### Fix conflicts (there will be some)

# Fix chrome major version for ffmpeg .so in pi-util/cplibs.sh and third_party//ffmpeg/BUILD.gn

git commit
### run through all other dirs we care about doing the same
### Probably need to fix exec perms on pi-util scripts
pi-util/syncroot.py <sysroot-ip>:
pi-util/gngen.py
### Fix up any new libpackage-dev that we need
ninja ...
### Fix up build disasters


If updating within a major version mergeing seems to work reliably so my
preferred method for achieving this goes:

# Make sure everything is committed
pi-util/gitscan.py status
# Revert to base chromium checkout for old checkout
pi-util/gitscan.py --gitscan-no-src checkout {BASE}
# Merge new version into current base
git fetch --all
TAG=<new_tag>
git merge $TAG
# Fix conflicts - DEPS always seems to conflict
git checkout $TAG -- DEPS
# Update pi-util/pipaths.py to contain the new tag
# Either commit now or later
sed "s/src_commit=.*/src_commit=\"$TAG\"/" pi-util/pipaths.py | tee t
mv t pi-util/pipaths.py && git add pi-util/pipaths.py
git commit --no-edit
# Get the rest of the tree
gclient sync --with_branch_heads
# Checkout our tree and merge the new base into it
pi-util/gitscan.py --gitscan-no-src checkout test/66/mmal_2
pi-util/gitscan.py --gitscan-no-src merge --no-edit {BASE}

and we should be good to go.  At this point you can either clean build or
not.  Chromes dependancy checks seem remarkably good so a simple build
works nearly all the time.

# Rebuild gn (clean)
rm -rf out
pi-util/gngen.py
# Build armv7 ffmpeg
ninja -C out/armv7 third_party/ffmpeg
# Build chrome
LD_LIBRARY_PATH=`pwd`/out/armv6/clang_x86_v8_arm ninja -C out/armv6 chrome chrome_sandbox


Sysroots (one time only)
------------------------

1st you will need to get the dev files for a bunch of libs on your pi (or
if you can get the right files by magic on your cross-compile m/c then
that is good too).  In src/pi-util there is a shell script
pi-install-dev.sh which lists all the libs I think are needed along with a
helpful apt-get install so all you should need to do is run it on an
appropriate pi.

Next the appropriate bits need to be copied to
build/linux/<sysroot-name>-sysroot. We use raspian_stretch_pi1 as the
sysroot name in these instructions and in the example script files so you
might well find it easiest to use the same name too

The script pi-util/syncroot.sh that will copy the needed bits of a root to
the right place and then fix the full path symlinks to be relative.  It
uses rsync to copy the files so the src can contain a machine name

pi-util/syncroot.sh my-pi: raspian_stretch_pi1

The "raspian_stretch_pi1" can be omitted and syncroot will choose the current
default sysroot name.

Beware that there are ~8 rsync statements so if the rsync is operating
over ssh then you may need to type your password 8 times...  Note also
that the script appends -sysroot to the given name so don't add that
yourself!

If the pi root is updated then this script can / should be rerun to update
the sysroot.



Other notes on the tree
-----------------------

The definitive list of expected repos is in pi-util/pipaths.py

The script pi-util/gitscan.py will perform the same git op on all the
repos that are in use in the current patch set.  It has substitutions
of {PATH} and {BASE} for the path to the current repo and the chromium
commit on which the current branch is based

The current dev branch is test/57/mmal_2

Status of optional neon by build file:
skia/BUILD.gn:                     yes
build/secondary/third_party/libjpeg_turbo/BUILD.gn: yes
third_party/libwebp/BUILD.gn:      yes
third_party/openmax_dl/dl/BUILD.gn unused
third_party/libyuv/BUILD.gn:       yes
third_party/libyuv/libyuv.gni:     yes
third_party/pdfium/skia/BUILD.gn:  unused
