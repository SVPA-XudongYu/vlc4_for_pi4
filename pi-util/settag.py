#!/usr/bin/env python

import sys, os, subprocess

# Local
import pipaths
import gitscan
import dodiff
import argparse

def set_version(verstr):
    pathname = "components/version_info/pi_patch_version_values.h"

    with open(pathname, "wt") as f:
        f.write("// Pi patch version - generated by pi-util/settag.py\n")
        f.write('#define PI_PATCH_VERSION_STRING "' + verstr + '"\n')

    subprocess.check_call(["git", "add", pathname])
    subprocess.check_call(["git", "commit", "-m", "Update pi patch version to " + verstr])


def set_tag(verstr):
    newtag = "pi/" + pipaths.src_commit + "/" + verstr
    print "Setting tag: " + newtag
    if gitscan.gitscan(["tag", newtag], quiet=True) != 0:
        print "Tagging failed"
        sys.exit(1)

def set_tag_and_version(verstr):
    set_version(verstr)
    set_tag(verstr)

if __name__ == '__main__':
    argp = argparse.ArgumentParser(
        description="Sets version info in pi_patch_version_values & tags source tree with it")
    argp.add_argument("-p", action='store_true', help="Generate patch file")
    argp.add_argument("verstr", help="Pi patch version string")
    args = argp.parse_args()

    patchpath = os.path.join("..", "v" + pipaths.src_commit + "_" + args.verstr + ".patch")

    if args.p and os.path.exists(patchpath):
        print "Patchfile", patchpath, "already exists"
        sys.exit(1)

    print "-- Checking all committed"
    if gitscan.gitscan(["diff", "--name-status", "--exit-code"], quiet=True) != 0:
        print "Status check failed - commit everything and try again"
        sys.exit(1)

    print "-- Generating & committing pi_patch_version_values.h"
    set_version(args.verstr)
    print "-- Generating tags"
    set_tag(args.verstr)

    if args.p:
        print "-- Generating patch file: ", patchpath
        with open(patchpath, "wt") as f:
            dodiff.doscan(f)

